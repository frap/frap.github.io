#+TITLE: Org-mode and Octopress
#+DATE: 2013-07-08
#+SETUPFILE: ~/Dev/ruby/octopress/octopress.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: [orgmode, octopress, emacs-live]
#+JEKYLL_PUBLISHED: true

I have recently just started re-blogging again. I used markdown previously to store note and am at present reformatting them to be compatible with this blog. I have decided on using [[http:octopress.org][Octopress]]
which is based on [[http://jekyllrb.com/][Jekyll]]. Why? because you can easily use [[http://github.io][GitHub Pages]] to host your site, its static files (no database setup hassle) and therefore
integrates with [[http://orgmode.org][Org Mode]] which I use to take notes. (Also its byline Blogging for Hackers resonates :)

However setting it up to work with org-mode is key for me. OrgMode has recently upgraded and deprecated some older stuff as of [[http://orgmode.org/Changes.html][Org-Mode 8.0]]. One of the
main changes is org-mode publishing which has been completely replaced and we have new packages like [[http://orgmode.org/worg/exporters/ox-overview.html][ox-md.el]] for Markdown exporting.

Finding orgmode octopress integrations that use new publishing was limited. The only thing I could find is [[https://github.com/yoshinari-nomura/org-octopress][Yoshinari Nomura's org-octopress]]. This is really
good however it does have a few idiosyncracies (well to me anyway)!

1) It publishes to html - I would prefer it jsut changed org-mode to Markdown and use octopress rake tools to manage the publishing
2) It relies on Yoshinari's "orglue" org-mode setup as well as ctables (ctables looks good - but dont have need as yet for complicated tables - add  another TODO!)

So I have started hacking around with it so it better meets my needs. One of those requirements is to export directly to Markdown so I have changed
the [[https://github.com/yoshinari-nomura/org-octopress/blob/master/ox-jekyll.el][ox-jekyll.el]] functions to use Markdown export.

{{{more}}}
#+BEGIN_SRC elisp
;;;###autoload
(defun org-jekyll-export-as-md
  (&optional async subtreep visible-only body-only ext-plist)
  "Export current buffer to a Markdown buffer adding some YAML front matter."
  (interactive)
  (if async
      (org-export-async-start
          (lambda (output)
            (with-current-buffer (get-buffer-create "*Org Jekyll MD Export*")
              (erase-buffer)
              (insert output)
              (goto-char (point-min))
              (text-mode)
              (org-export-add-to-stack (current-buffer) 'jekyll)))
        `(org-export-as 'jekyll ,subtreep ,visible-only ,body-only ',ext-plist))
    (let ((outbuf (org-export-to-buffer
                   'jekyll "*Org Jekyll MD Export*"
                   subtreep visible-only body-only ext-plist)))
      ;; Set major mode.
      (with-current-buffer outbuf (text-mode))
      (when org-export-show-temporary-export-buffer
        (switch-to-buffer-other-window outbuf)))))

;;;###autoload
(defun org-jekyll-export-to-md
  (&optional async subtreep visible-only body-only ext-plist)
  "Export current buffer to a Markdown file adding some YAML front matter."
  (interactive)
  (let ((outfile (org-export-output-file-name ".markdown" subtreep)))
    (if async
        (org-export-async-start
            (lambda (f) (org-export-add-to-stack f 'jekyll))
             `(expand-file-name
               (org-export-to-file
                'jekyll ,outfile ,subtreep ,visible-only ,body-only ',ext-plist)))
         (org-export-to-file
         'jekyll outfile subtreep visible-only body-only ext-plist))))

#+END_SRC

we need to also change [[https://github.com/yoshinari-nomura/org-octopress/blob/master/org-octopress.el][org-octopress.el]] to change its publishing format. I think I will pack up these changes and put them into
a [[http://overtone.github.io/emacs-live/doc-pack-structure.html][emacs live .live_pack]] so that I can easily control this as a package for my workflow. Thanks Yoshinari for the great package
- now just need to understand it a bit better!
